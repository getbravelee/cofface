<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.orderme.recommendation.mapper.RecommendationMapper">

    <!-- MenuMapper의 MenuResultMap을 참조합니다 -->
    <select id="findPopularMenusByGenderAndAge" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        FROM menus m
                 JOIN genderagepreference gap ON m.menu_id = gap.menu_id
                 LEFT JOIN categories c ON m.category_id = c.category_id
        WHERE gap.store_id = #{storeId}
          AND gap.gender = #{gender}
          AND gap.age_group = #{ageGroup}
          AND m.is_deleted = false
          AND m.is_sold_out = false
        ORDER BY gap.order_count DESC
            LIMIT #{limit}
    </select>

    <select id="findMostPopularMenus" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at,
            COUNT(om.order_menu_id) as order_count
        FROM menus m
                 LEFT JOIN categories c ON m.category_id = c.category_id
                 LEFT JOIN ordermenu om ON m.menu_id = om.menu_id
                 LEFT JOIN orders o ON om.order_id = o.order_id
        WHERE c.store_id = #{storeId}
          AND m.is_deleted = false
          AND m.is_sold_out = false
          AND (o.kiosk_id = #{storeId} OR o.kiosk_id IS NULL)
        GROUP BY m.menu_id, m.menu_name, m.price, m.category_id,
                 c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        ORDER BY order_count DESC, m.menu_name
            LIMIT #{limit}
    </select>

    <!-- 주문 옵션 기반 인기 메뉴와 옵션 조회 -->
    <select id="getMenusWithPopularOptions" resultType="com.ssafy.orderme.recommendation.dto.response.MenuWithOptionsDto">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        oi.item_id as option_id,
        oi.option_name,
        oi.additional_price,
        oc.category_id as option_category_id,
        oc.category_name as option_category_name,
        oc.is_required,
        COUNT(oo.order_option_id) as option_popularity
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        LEFT JOIN
        orderoption oo ON om.order_menu_id = oo.order_menu_id
        LEFT JOIN
        optionitems oi ON oo.option_item_id = oi.item_id
        LEFT JOIN
        optioncategories oc ON oi.category_id = oc.category_id
        WHERE
        c.store_id = #{storeId}
        <if test="userId != null">
            AND o.user_id = #{userId}
        </if>
        <if test="gender != null">
            AND o.gender = #{gender}
        </if>
        <if test="ageGroup != null">
            AND FLOOR(o.age/10)*10 = #{ageGroup}
        </if>
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name, m.is_sold_out, m.image_url,
        m.description, oi.item_id, oi.option_name, oi.additional_price, oc.category_id, oc.category_name, oc.is_required
        ORDER BY
        COUNT(DISTINCT om.order_menu_id) DESC, m.menu_id, option_popularity DESC
        LIMIT 10
    </select>

    <select id="findPopularMenusByGenderAndAgeRange" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        FROM menus m
                 JOIN categories c ON m.category_id = c.category_id
                 JOIN orders o ON o.kiosk_id = #{storeId}
                 JOIN ordermenu om ON om.order_id = o.order_id AND om.menu_id = m.menu_id
        WHERE c.store_id = #{storeId}
          AND o.gender = #{gender}
          AND o.age BETWEEN #{minAge} AND #{maxAge}
          AND m.is_deleted = false
          AND m.is_sold_out = false
        GROUP BY m.menu_id
        ORDER BY COUNT(om.order_menu_id) DESC
            LIMIT #{limit}
    </select>

    <!-- 성별/나이 기반 메뉴 추천 쿼리 (개선된 버전) -->
    <select id="findMenusByGenderAndAge" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) / (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.gender = #{gender}
        AND FLOOR(o2.age/10)*10 = #{ageGroup})) * 100 as percentage,
        -- 주문된 메뉴 ID 및 해당 주문의 order_menu_id 추가
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.gender = #{gender}
        AND FLOOR(o_sub.age/10)*10 = #{ageGroup}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.gender = #{gender}
        AND FLOOR(o.age/10)*10 = #{ageGroup}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 메뉴 ID에 대한 인기 옵션 조회 쿼리 -->
    <select id="findPopularOptionsByMenuId" resultType="map">
        SELECT
            oc.category_id,
            oc.category_name,
            oc.is_required,
            oi.item_id,
            oi.option_name,
            oi.additional_price,
            COUNT(oo.order_option_id) as option_count
        FROM
            orderoption oo
                JOIN
            ordermenu om ON oo.order_menu_id = om.order_menu_id
                JOIN
            optionitems oi ON oo.option_item_id = oi.item_id
                JOIN
            optioncategories oc ON oi.category_id = oc.category_id
        WHERE
            om.menu_id = #{menuId}
        GROUP BY
            oc.category_id, oc.category_name, oc.is_required,
            oi.item_id, oi.option_name, oi.additional_price
        ORDER BY
            oc.category_id, option_count DESC
    </select>

    <!-- 가장 최근 주문의 날씨 정보 조회 -->
    <select id="findLatestWeather" resultType="string">
        SELECT weather
        FROM orders
        WHERE kiosk_id = #{storeId}
        ORDER BY order_date DESC
            LIMIT 1
    </select>

    <!-- 시간대별 인기 메뉴 조회 -->
    <select id="findMenusByTimeOfDay" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId}
        AND HOUR(o2.order_date) = #{hourOfDay})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND HOUR(o_sub.order_date) = #{hourOfDay}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        AND HOUR(o.order_date) = #{hourOfDay}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 날씨 기반 인기 메뉴 조회 -->
    <select id="findMenusByWeather" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId}
        AND o2.weather = #{weather})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND o_sub.weather = #{weather}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        AND o.weather = #{weather}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 요일별 인기 메뉴 조회 -->
    <select id="findMenusByDayOfWeek" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId}
        AND DAYOFWEEK(o2.order_date) = #{dayOfWeek})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND DAYOFWEEK(o_sub.order_date) = #{dayOfWeek}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        AND DAYOFWEEK(o.order_date) = #{dayOfWeek}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 주별 인기 메뉴 조회 -->
    <select id="findMenusByWeekOfYear" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId}
        AND WEEK(o2.order_date) = #{weekOfYear})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND WEEK(o_sub.order_date) = #{weekOfYear}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        AND WEEK(o.order_date) = #{weekOfYear}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 월별 인기 메뉴 조회 -->
    <select id="findMenusByMonth" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId}
        AND MONTH(o2.order_date) = #{month})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND MONTH(o_sub.order_date) = #{month}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        AND MONTH(o.order_date) = #{month}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 매장 스테디셀러 메뉴 조회 -->
    <select id="findSteadySellerMenu" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.kiosk_id = #{storeId})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.kiosk_id = #{storeId}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.kiosk_id = #{storeId}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 회원이 가장 많이 주문한 메뉴 조회 -->
    <select id="findMostOrderedMenuByUser" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        (COUNT(DISTINCT o.order_id) * 100.0 /
        (SELECT COUNT(DISTINCT o2.order_id)
        FROM orders o2
        WHERE o2.user_id = #{userId})) as percentage,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.user_id = #{userId}
        AND o_sub.kiosk_id = #{storeId}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.user_id = #{userId}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2
        ORDER BY
        order_count DESC
        LIMIT 1
    </select>

    <!-- 회원의 최근 주문 메뉴 조회 -->
    <select id="findLatestOrderedMenuByUser" resultType="map">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        m.keyword1,
        m.keyword2,
        COUNT(DISTINCT o.order_id) as order_count,
        o.order_date,
        (
        SELECT om_sub.order_menu_id
        FROM orders o_sub
        JOIN ordermenu om_sub ON o_sub.order_id = om_sub.order_id
        WHERE o_sub.user_id = #{userId}
        AND o_sub.kiosk_id = #{storeId}
        AND om_sub.menu_id = m.menu_id
        ORDER BY o_sub.order_date DESC
        LIMIT 1
        ) as latest_order_menu_id
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orders o ON om.order_id = o.order_id
        WHERE
        c.store_id = #{storeId}
        AND o.user_id = #{userId}
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        AND m.is_deleted = false
        AND m.is_sold_out = false
        GROUP BY
        m.menu_id, m.menu_name, m.price, m.category_id, c.category_name,
        m.is_sold_out, m.image_url, m.description, m.keyword1, m.keyword2, o.order_date
        ORDER BY
        o.order_date DESC
        LIMIT 1
    </select>

    <select id="findOptionsForOrderMenu" resultType="map">
        SELECT
            oo.order_option_id,
            oo.option_item_id,
            oi.option_name,
            oi.additional_price,
            oc.category_id as option_category_id,
            oc.category_name as option_category_name,
            oc.is_required
        FROM
            orderoption oo
                JOIN optionitems oi ON oo.option_item_id = oi.item_id
                JOIN optioncategories oc ON oi.category_id = oc.category_id
        WHERE
            oo.order_menu_id = #{orderMenuId}
        ORDER BY
            oc.category_id, oi.item_id
    </select>

    <!-- RecommendationMapper.xml에 추가 -->
    <select id="findAllOptionsForMenu" resultType="map">
        SELECT
            oc.category_id,
            oc.category_name,
            oc.is_required,
            oi.item_id,
            oi.option_name,
            oi.additional_price,
            oi.is_default,
            oi.display_order
        FROM
            menus m
                JOIN
            menuoptioncategories moc ON m.menu_id = moc.menu_id
                JOIN
            optioncategories oc ON moc.category_id = oc.category_id
                JOIN
            optionitems oi ON oc.category_id = oi.category_id
        WHERE
            m.menu_id = #{menuId}
          AND m.is_deleted = false
          AND oi.is_deleted = false
        ORDER BY
            oc.category_id, oi.display_order
    </select>

    <!-- 날씨 기반 메뉴 선호도 업데이트 -->
    <insert id="updateWeatherPreference">
        INSERT INTO weatherpreference (store_id, menu_id, weather_condition, order_count, updated_at)
        VALUES (#{storeId}, #{menuId}, #{weather}, 1, NOW())
            ON DUPLICATE KEY UPDATE
                                 order_count = order_count + 1,
                                 updated_at = NOW()
    </insert>

    <!-- 기타 업데이트 쿼리 등... -->
    <update id="updateMenuPopularity">
        UPDATE menus
        SET popularity = IFNULL(popularity, 0) + 1
        WHERE menu_id = #{menuId}
    </update>

    <insert id="updateGenderAgePreference">
        INSERT INTO genderagepreference (store_id, gender, age_group, menu_id, order_count, last_updated)
        VALUES (#{storeId}, #{gender}, #{ageGroup}, #{menuId}, 1, NOW())
            ON DUPLICATE KEY UPDATE
                                 order_count = order_count + 1,
                                 last_updated = NOW()
    </insert>

    <insert id="updateUserPreference">
        INSERT INTO usermenupreference (user_id, menu_id, order_count, last_updated)
        VALUES (#{userId}, #{menuId}, 1, NOW())
            ON DUPLICATE KEY UPDATE
                                 order_count = order_count + 1,
                                 last_updated = NOW()
    </insert>
</mapper>