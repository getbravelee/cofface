<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.orderme.recommendation.mapper.RecommendationMapper">

    <!-- MenuMapper의 MenuResultMap을 참조합니다 -->
    <select id="findPopularMenusByGenderAndAge" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        FROM menus m
                 JOIN genderagepreference gap ON m.menu_id = gap.menu_id
                 LEFT JOIN categories c ON m.category_id = c.category_id
        WHERE gap.store_id = #{storeId}
          AND gap.gender = #{gender}
          AND gap.age_group = #{ageGroup}
          AND m.is_deleted = false
          AND m.is_sold_out = false
        ORDER BY gap.order_count DESC
            LIMIT #{limit}
    </select>

    <select id="findMostPopularMenus" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at,
            COUNT(om.order_menu_id) as order_count
        FROM menus m
                 LEFT JOIN categories c ON m.category_id = c.category_id
                 LEFT JOIN ordermenu om ON m.menu_id = om.menu_id
                 LEFT JOIN orders o ON om.order_id = o.order_id
        WHERE c.store_id = #{storeId}
          AND m.is_deleted = false
          AND m.is_sold_out = false
          AND (o.kiosk_id = #{storeId} OR o.kiosk_id IS NULL)
        GROUP BY m.menu_id, m.menu_name, m.price, m.category_id,
                 c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        ORDER BY order_count DESC, m.menu_name
            LIMIT #{limit}
    </select>

    <!-- 다른 select 문들... -->

    <!-- 주문 옵션 기반 인기 메뉴와 옵션 조회 (추가) -->
    <select id="getMenusWithPopularOptions" resultType="com.ssafy.orderme.recommendation.dto.response.MenuWithOptionsDto">
        SELECT
        m.menu_id,
        m.menu_name,
        m.price,
        m.category_id,
        c.category_name,
        m.is_sold_out,
        m.image_url,
        m.description,
        oi.item_id as option_id,
        oo.option_name,
        oo.option_price as additional_price,
        oc.category_id as option_category_id,
        oc.category_name as option_category_name,
        oc.is_required,
        COUNT(oo.order_option_id) as option_popularity
        FROM
        menus m
        JOIN
        categories c ON m.category_id = c.category_id
        JOIN
        ordermenu om ON m.menu_id = om.menu_id
        JOIN
        orderoption oo ON om.order_menu_id = oo.order_menu_id
        JOIN
        optionitems oi ON oo.option_item_id = oi.item_id
        JOIN
        optioncategories oc ON oi.category_id = oc.category_id
        WHERE
        c.store_id = #{storeId}
        <if test="userId != null">
            AND om.order_id IN (SELECT order_id FROM orders WHERE user_id = #{userId})
        </if>
        <if test="gender != null">
            AND om.order_id IN (SELECT order_id FROM orders WHERE gender = #{gender})
        </if>
        <if test="ageGroup != null">
            AND om.order_id IN (SELECT order_id FROM orders WHERE FLOOR(age/10)*10 = #{ageGroup})
        </if>
        <if test="weather != null">
            AND om.order_id IN (SELECT order_id FROM orders WHERE weather = #{weather})
        </if>
        <if test="excludeMenuIds != null and excludeMenuIds.size() > 0">
            AND m.menu_id NOT IN
            <foreach item="menuId" collection="excludeMenuIds" open="(" separator="," close=")">
                #{menuId}
            </foreach>
        </if>
        GROUP BY
        m.menu_id, oi.item_id, m.menu_name, m.price, m.category_id, c.category_name, m.is_sold_out, m.image_url,
        m.description, oo.option_name, oo.option_price, oc.category_id, oc.category_name, oc.is_required
        ORDER BY
        COUNT(om.order_menu_id) DESC, option_popularity DESC
        LIMIT 50
    </select>

    <select id="findPopularMenusByGenderAndAgeRange" resultMap="com.ssafy.orderme.kiosk.mapper.MenuMapper.MenuResultMap">
        SELECT
            m.menu_id, m.menu_name, m.price, m.category_id,
            c.category_name, m.is_sold_out, m.image_url, m.description, m.is_deleted, m.deleted_at
        FROM menus m
                 JOIN categories c ON m.category_id = c.category_id
                 JOIN orders o ON o.kiosk_id = #{storeId}
                 JOIN ordermenu om ON om.order_id = o.order_id AND om.menu_id = m.menu_id
        WHERE c.store_id = #{storeId}
          AND o.gender = #{gender}
          AND o.age BETWEEN #{minAge} AND #{maxAge}
          AND m.is_deleted = false
          AND m.is_sold_out = false
        GROUP BY m.menu_id
        ORDER BY COUNT(om.order_menu_id) DESC
            LIMIT #{limit}
    </select>

    <!-- 기타 업데이트 쿼리 등... -->
    <update id="updateMenuPopularity">
        UPDATE menus
        SET popularity = IFNULL(popularity, 0) + 1
        WHERE menu_id = #{menuId}
    </update>

    <insert id="updateGenderAgePreference">
        INSERT INTO genderagepreference (store_id, gender, age_group, menu_id, order_count, last_updated)
        VALUES (#{storeId}, #{gender}, #{ageGroup}, #{menuId}, 1, NOW())
            ON DUPLICATE KEY UPDATE
                                 order_count = order_count + 1,
                                 last_updated = NOW()
    </insert>

    <insert id="updateUserPreference">
        INSERT INTO usermenupreference (user_id, menu_id, order_count, last_updated)
        VALUES (#{userId}, #{menuId}, 1, NOW())
            ON DUPLICATE KEY UPDATE
                                 order_count = order_count + 1,
                                 last_updated = NOW()
    </insert>
</mapper>